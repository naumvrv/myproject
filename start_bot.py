# start_bot.py
import asyncio
import subprocess
import sys
from typing import Optional
from datetime import datetime
import aiofiles
import os
import logging

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –±–∞–∑–æ–≤—ã–º –ª–æ–≥–≥–µ—Ä–æ–º
try:
    from logging_setup import setup_logging
    logger = setup_logging("bot_start_log.txt")
except ImportError as e:
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("start_bot")
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å logging_setup: {e}")

try:
    from telegram_utils import send_async_message
except ImportError as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å telegram_utils: {e}")
    async def send_async_message(msg: str) -> None:
        logger.warning(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: {msg}")

async def check_python() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –≤–µ—Ä—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Python.

    Returns:
        bool: True, –µ—Å–ª–∏ Python –≤–µ—Ä—Å–∏–∏ 3.8+ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ False.

    Raises:
        Exception: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ Python.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.executable –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ Python
        process = await asyncio.create_subprocess_exec(
            sys.executable, "--version",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        version_output = stdout.decode().strip() or stderr.decode().strip()
        if not version_output.startswith("Python"):
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏ Python: {version_output}")
        
        version_str = version_output.split()[1]
        version = tuple(map(int, version_str.split('.')))
        min_version = (3, 8)
        if version < min_version:
            logger.error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: {version_str}")
            await send_async_message(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: {version_str}")
            return False
        
        logger.info(f"Python –Ω–∞–π–¥–µ–Ω: {version_str}")
        return True
    except (subprocess.SubprocessError, FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python: {e}", exc_info=True)
        await send_async_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python: {e}")
        return False

async def start_bot() -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.

    Raises:
        Exception: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    if not await check_python():
        return

    attempt = 0
    max_attempts = 5
    min_delay = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    while attempt < max_attempts:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        bot_log = f"bot_log_{timestamp}.txt"
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –ª–æ–≥–∏ –≤ {bot_log}")

        if not os.path.exists("main.py"):
            logger.error("–§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await send_async_message("‚ö†Ô∏è –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            break

        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            async with aiofiles.open(bot_log, "w", encoding="utf-8") as log_file:
                process = await asyncio.create_subprocess_exec(
                    sys.executable, "main.py",
                    stdout=log_file.file,
                    stderr=subprocess.STDOUT
                )
                returncode = await process.wait()

            if returncode != 0:
                attempt += 1
                logger.error(f"–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ {bot_log}.")
                await send_async_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ {bot_log}")
                if attempt >= max_attempts:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                    await send_async_message("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞.")
                    break
                delay = max(min_delay, min(300 * (2 ** (attempt - 1)), 3600))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å –º–∏–Ω–∏–º—É–º–æ–º
                logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
            else:
                logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –õ–æ–≥–∏ –≤ {bot_log}")
                await send_async_message(f"‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –õ–æ–≥–∏: {bot_log}")
                break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {e}", exc_info=True)
            await send_async_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {e}")
            attempt += 1
            if attempt >= max_attempts:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                await send_async_message("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞.")
                break
            delay = max(min_delay, min(300 * (2 ** (attempt - 1)), 3600))
            await asyncio.sleep(delay)

if __name__ == "__main__":
    asyncio.run(start_bot())